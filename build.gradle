/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.2/userguide/java_library_plugin.html
 */
buildscript {
	ext {
		springBootVersion = '2.2.5.RELEASE'
	}
	repositories {
		maven { url "https://nexus.prod.cloud.fedex.com:8443/nexus/content/repositories/central/" }
		
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id "jacoco"
}

repositories {
   		maven { url "https://nexus.prod.cloud.fedex.com:8443/nexus/content/repositories/central" }
		maven { url "https://nexus.prod.cloud.fedex.com:8443/nexus/content/repositories/release" }
		maven { url "https://nexus.prod.cloud.fedex.com:8443/nexus/content/repositories/snapshot" }
		maven { url "https://nexus.prod.cloud.fedex.com:8443/nexus/content/repositories/fxg-snapshots" }
		maven { url "https://nexus.prod.cloud.fedex.com:8443/nexus/content/repositories/fxg-releases" }
		maven { url "https://nexus.prod.cloud.fedex.com:8443/nexus/content/repositories/3535157-FedexJmsDecorator" }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

dependencies {
    
        api 'org.apache.commons:commons-math3:3.6.1'

        compile('com.fedex.ground.jms:fxgJms:4.3.1')
        compile('com.fedex.mwa:fedexjms:8.0.1')
        compile('com.fedex.mwa:tibjms:8.0.1')
        compile('com.fedex.mwa:tibcrypt:8.0.1')
        compile('com.fedex.mwa:jms-2.0:8.0.1')
        compile('com.fedex.mwa:proton-j:8.0.1')
        compile('com.fedex.mwa:qpid-jms:8.0.1')
        compile('com.fedex.mwa:netty-all:8.0.1')
        compile("com.fedex.ground.security:fxg-security-client:1.5.3")
        compileOnly('org.projectlombok:lombok:1.18.12')
        annotationProcessor('org.projectlombok:lombok:1.18.12')
        compile('org.slf4j:log4j-over-slf4j')
        
        testCompile('junit:junit:4.12')
        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile('junit:junit:4.12')
        testCompile('info.cukes:cucumber-junit:1.2.6')
        testCompile('info.cukes:cucumber-spring:1.2.6')
        testCompile('info.cukes:cucumber-java:1.2.6')
        testCompile('org.mockito:mockito-core:2.7.22')
        testCompile('org.powermock:powermock-api-mockito2:1.7.0RC4')
        testCompile('org.powermock:powermock-module-junit4:1.7.0RC4')
        testCompile('com.github.tomakehurst:wiremock-jre8:2.21.0')
        testCompileOnly('org.projectlombok:lombok:1.18.12')
        testAnnotationProcessor('org.projectlombok:lombok:1.18.12')
        
        implementation('org.springframework.boot:spring-boot-starter-data-redis:2.3.3.RELEASE'){
            exclude group: 'io.lettuce', module: 'lettuce-core'
            testImplementation 'io.cucumber:cucumber-java:6.8.0'
            testImplementation 'io.cucumber:cucumber-junit:6.8.0'
        }
        implementation 'it.ozimov:embedded-redis:0.7.2'
        implementation 'redis.clients:jedis:3.1.0'

}

test {
        useJUnitPlatform()
}

jacoco {
   toolVersion = "0.8.1"
   }

jacocoTestReport{
    reports{
    xml.enabled true
    csv.enabled true
html.destination file("${buildDir}/jacocoHtml")    }
 }

plugins.withType(JacocoPlugin) {
 test.finalizedBy(project.tasks.jacocoTestReport)

}